notes
-----

If a user increments a ref after generating it in gc, they are changing the allocation address stored in the pointer, but not the allocation address of the allocated memory block. Thus, on some target systms, the local Heap deallocator implemented in free() may not know which block to deallocate, if it doesn't do range checks upon failing to get an exact address-match in it's allocated-blocks lookup table. The gc should provide an indirect method to modify pointers to Heap allocated-block entry-points, and a static tool could preprocess the User's souce code to look for pointer arithmetic on pointer references returned by "gc" to the User-space, and offer a choice to either automatically convert the pointer-modification operations in the User code to "gc" methods, or emit a warning to the User that there is pointer arithemtic mutating pointers returned by "gc", and they should heed.

General pointer mutations:

ptr++
ptr--

ptr + (n)
ptr - (n),

where n is an expression, perhaps compound, providing a scalar offset from the ptr target address. There is a difference between a ptr as an r-value, and a ptr as an l-value, as in we are interested in identifying when the User is modifying the ptr (mutating it), rather than some other arcane r-value offset-calculating shenanigans.

////

INC_PTR( ptr ) // ptr++
DEC_PTR( ptr ) // ptr--
PRE_INC_PTR( ptr ) // ++ptr
PRE_DEC_PTR( ptr ) // --ptr

PTR_EQ( ptr,rhs-exp ) // equiv to ptr = [rhs-exp]
PTR_PLUS_EQ( ptr,rhs-exp ) // ptr += [rhs-exp]
PTR_MINUS_EQ( ptr, rhs-exp ) // ptr -= [rhs-exp]

// GC methodology for managing ptr mutations:

1. "gc" searches for the pointer target listed in the primary "allocated-blocks" look-up table. If it matches with an entry, it will free that entry. If not,
2. Whatever the modified (new) target address for the pointer, a 2nd lookup-table (populated by the above helper ptr-mutation virtual opreators) to find it's associated starting allocation address when generated by the "gc" allocation method. Then, "gc" will pass that initialised allocation address to the system Heap de-allocation method, free().
3. If none is found in the 2nd look-up table, then "gc" can do a range search, essentially by looking for a ptr in the 1st look-up table that has a lower memory address than the ptr passed by the User for de-allocation, but is not lower from the passed ptr than any other allocation address in the look-up table.


